syntax = "proto3";
package com.github.ooze.protos;

option java_multiple_files = true;

message PaletteData {
  // The palette's main identifier.
  ResourceLocationData name = 1;

  // The Minecraft data version that the palette's states are compatible with.
  uint32 data_version = 2;

  // The blocks in the palette. Data using the palette can reference the
  // palette's states using their indices in this list.
  repeated BlockStateData states = 3;
}

message BlockStateData {
  // The state's main identifier.
  ResourceLocationData name = 1;

  // Additional information defining the state, if any. This includes things
  // like orientation, power, and waterlogged state.
  bytes properties = 2;

  // Whether or not blocks with this state should be considered "empty". This
  // allows sections of a level to be optimized away if a large portion of
  // blocks in it are empty.
  bool is_empty = 3;
}

message ResourceLocationData {
  // The context in which the resource exists. If missing, the default namespace
  // "minecraft" is used.
  //
  // The namespace can only contain the following characters:
  //  - digits: 0-9
  //  - lowercase letters: a-z
  //  - hyphens: -
  //  - full stops: .
  //  - underscores: _
  string namespace = 1;

  // The resource's name, identifier, or path. Must be present.
  //
  // The path can contain any character that a namespace can, in addition to:
  //   - forward slashes: /
  string path = 2;
}

message PackedUIntArrayData {
  // The number of uints in the array.
  uint32 size = 1;

  // The number of bits used to store each uint in the array. Valid values are
  // in the range [0, 32].
  uint32 magnitude = 2;

  // The contents of the array. Values are stored on the bit level, so uints in
  // the array may not be aligned with the bytes themselves. A single byte might
  // contain multiple values, and/or a single value could be stored between two
  // or more bytes.
  //
  // Given a value's index in the array, i, the byte index that it starts in can
  // be found using `floor(i * magnitude / 8)`. Within that byte, the starting
  // bit's offset (from the LSB) is `(i * magnitude) mod 8`.
  //
  // If the last bit of the byte is reached before the value is fully read,
  // continue reading from the right side (LSB) of the next byte. Repeat until
  // the full number of bits, determined by `magnitude`, have been consumed.
  bytes contents = 3;
}